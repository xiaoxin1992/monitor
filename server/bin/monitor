#! /usr/bin/env python
#! _*_ coding:utf-8
import sys,os,time,atexit
from signal import SIGTERM
server_root = os.path.dirname(sys.path[0].strip())
sys.path.append(server_root)
from Modules.server import start
"""
用于创建守护进程
"""

class daemon(object):
    def __init__(self,pidfile,stdin='/dev/null',stdout='/dev/null',stderr='/dev/null',):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile
    def daemonize(self):
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError,e:
            sys.stderr.write('fork fist faild:%d (%s)\n') % (e.errno,e.strerror)
            sys.exit(1)
        os.chdir('/')
        os.setsid()
        os.umask(0022)
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError,e: 
            sys.stderr.write("fork second faild:%d (%s)\n" % (e.errno,e.strerror))
            sys.exit(1)
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin,'r')
        so = file(self.stdout,'a+')
        se = file(self.stderr,'a+',0)
        os.dup2(si.fileno(),sys.stdin.fileno())
        os.dup2(so.fileno(),sys.stdout.fileno())
        os.dup2(se.fileno(),sys.stderr.fileno())
        atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile,'w+').write("%s\n" % pid)
    def delpid(self):
        os.remove(self.pidfile)
    def start(self):
        try:
            pf = open(self.pidfile,'r')
            pid = intern(pf.read().strip())
            pf.close()
        except IOError:
            pid=None
        if pid:
            message="pidfile %s already exist,monitor already running\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)
        self.daemonize()
        self.run()
    def stop(self):
        try:
            pf=open(self.pidfile,'r')
            pid=intern(pf.read().strip())
            pf.close()
        except IOError:
            pid=None
        if not pid:
            message="pidfile %s does not exit,monitor not running\n"
            sys.stderr.write(message % self.pidfile)
            return
        try:
            while 1:
                os.kill(int(pid),9)
                time.sleep(0.1)
                os.remove(self.pidfile)
        except OSError,err:
            err = str(err)
            if err.find('No sush process') >0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
                else:
                    print str(err)
                    sys.exit(1)
    def restart(self):
        self.stop()
        self.start()
    def run(self):
        start()

if __name__ =='__main__':
    daemon = daemon(server_root + '/pid/monitor_server.pid')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
            sys.exit(2)
        sys.exit(0)
    else:
        #print "usage:%s start/stop/restart" % (sys.argv[0])
        sys.exit(2)
            
                                                           
                
                
